{
  "timestamp": "2025-07-04T20:27:43.563377",
  "tested": 3,
  "successful": 1,
  "results": [
    {
      "notebook": "03_scitex_utils.ipynb",
      "fix": "Fixed division by zero",
      "success": true,
      "error": null
    },
    {
      "notebook": "11_scitex_stats.ipynb",
      "fix": "Fixed PyTorch .item()",
      "success": false,
      "error": "\n---------------------------------------------------------------------------\nException encountered at \"In [35]\":\n  File <string>\nSyntaxError: not a PNG file\n\n"
    },
    {
      "notebook": "14_scitex_plt.ipynb",
      "fix": "Fixed LaTeX Unicode",
      "success": false,
      "error": "\n---------------------------------------------------------------------------\nException encountered at \"In [5]\":\n---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\nCell In[5], line 49\n     46 axes[1,1].legend()\n     47 axes[1,1].grid(True, alpha=0.3)\n---> 49 plt.tight_layout()\n     50 stx.io.save(fig, output_dir / 'figures' / 'multi_panel_analysis.png')\n     51 plt.show()\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/pyplot.py:2844, in tight_layout(pad, h_pad, w_pad, rect)\n   2836 @_copy_docstring_and_deprecators(Figure.tight_layout)\n   2837 def tight_layout(\n   2838     *,\n   (...)   2842     rect: tuple[float, float, float, float] | None = None,\n   2843 ) -> None:\n-> 2844     gcf().tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/figure.py:3640, in Figure.tight_layout(self, pad, h_pad, w_pad, rect)\n   3638 previous_engine = self.get_layout_engine()\n   3639 self.set_layout_engine(engine)\n-> 3640 engine.execute(self)\n   3641 if previous_engine is not None and not isinstance(\n   3642     previous_engine, (TightLayoutEngine, PlaceHolderLayoutEngine)\n   3643 ):\n   3644     _api.warn_external('The figure layout has changed to tight')\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/layout_engine.py:188, in TightLayoutEngine.execute(self, fig)\n    186 renderer = fig._get_renderer()\n    187 with getattr(renderer, \"_draw_disabled\", nullcontext)():\n--> 188     kwargs = get_tight_layout_figure(\n    189         fig, fig.axes, get_subplotspec_list(fig.axes), renderer,\n    190         pad=info['pad'], h_pad=info['h_pad'], w_pad=info['w_pad'],\n    191         rect=info['rect'])\n    192 if kwargs:\n    193     fig.subplots_adjust(**kwargs)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/_tight_layout.py:266, in get_tight_layout_figure(fig, axes_list, subplotspec_list, renderer, pad, h_pad, w_pad, rect)\n    261         return {}\n    262     span_pairs.append((\n    263         slice(ss.rowspan.start * div_row, ss.rowspan.stop * div_row),\n    264         slice(ss.colspan.start * div_col, ss.colspan.stop * div_col)))\n--> 266 kwargs = _auto_adjust_subplotpars(fig, renderer,\n    267                                   shape=(max_nrows, max_ncols),\n    268                                   span_pairs=span_pairs,\n    269                                   subplot_list=subplot_list,\n    270                                   ax_bbox_list=ax_bbox_list,\n    271                                   pad=pad, h_pad=h_pad, w_pad=w_pad)\n    273 # kwargs can be none if tight_layout fails...\n    274 if rect is not None and kwargs is not None:\n    275     # if rect is given, the whole subplots area (including\n    276     # labels) will fit into the rect instead of the\n   (...)    280     # auto_adjust_subplotpars twice, where the second run\n    281     # with adjusted rect parameters.\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/_tight_layout.py:82, in _auto_adjust_subplotpars(fig, renderer, shape, span_pairs, subplot_list, ax_bbox_list, pad, h_pad, w_pad, rect)\n     80 for ax in subplots:\n     81     if ax.get_visible():\n---> 82         bb += [martist._get_tightbbox_for_layout_only(ax, renderer)]\n     84 tight_bbox_raw = Bbox.union(bb)\n     85 tight_bbox = fig.transFigure.inverted().transform_bbox(tight_bbox_raw)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/artist.py:1402, in _get_tightbbox_for_layout_only(obj, *args, **kwargs)\n   1396 \"\"\"\n   1397 Matplotlib's `.Axes.get_tightbbox` and `.Axis.get_tightbbox` support a\n   1398 *for_layout_only* kwarg; this helper tries to use the kwarg but skips it\n   1399 when encountering third-party subclasses that do not support it.\n   1400 \"\"\"\n   1401 try:\n-> 1402     return obj.get_tightbbox(*args, **{**kwargs, \"for_layout_only\": True})\n   1403 except TypeError:\n   1404     return obj.get_tightbbox(*args, **kwargs)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/axes/_base.py:4577, in _AxesBase.get_tightbbox(self, renderer, call_axes_locator, bbox_extra_artists, for_layout_only)\n   4574     bbox_artists = self.get_default_bbox_extra_artists()\n   4576 for a in bbox_artists:\n-> 4577     bbox = a.get_tightbbox(renderer)\n   4578     if (bbox is not None\n   4579             and 0 < bbox.width < np.inf\n   4580             and 0 < bbox.height < np.inf):\n   4581         bb.append(bbox)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/legend.py:1059, in Legend.get_tightbbox(self, renderer)\n   1057 def get_tightbbox(self, renderer=None):\n   1058     # docstring inherited\n-> 1059     return self._legend_box.get_window_extent(renderer)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:367, in OffsetBox.get_window_extent(self, renderer)\n    365 if renderer is None:\n    366     renderer = self.get_figure(root=True)._get_renderer()\n--> 367 bbox = self.get_bbox(renderer)\n    368 try:  # Some subclasses redefine get_offset to take no args.\n    369     px, py = self.get_offset(bbox, renderer)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:360, in OffsetBox.get_bbox(self, renderer)\n    358 def get_bbox(self, renderer):\n    359     \"\"\"Return the bbox of the offsetbox, ignoring parent offsets.\"\"\"\n--> 360     bbox, offsets = self._get_bbox_and_child_offsets(renderer)\n    361     return bbox\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:460, in VPacker._get_bbox_and_child_offsets(self, renderer)\n    457         if isinstance(c, PackerBase) and c.mode == \"expand\":\n    458             c.set_width(self.width)\n--> 460 bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]\n    461 (x0, x1), xoffsets = _get_aligned_offsets(\n    462     [bbox.intervalx for bbox in bboxes], self.width, self.align)\n    463 height, yoffsets = _get_packed_offsets(\n    464     [bbox.height for bbox in bboxes], self.height, sep, self.mode)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:460, in <listcomp>(.0)\n    457         if isinstance(c, PackerBase) and c.mode == \"expand\":\n    458             c.set_width(self.width)\n--> 460 bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]\n    461 (x0, x1), xoffsets = _get_aligned_offsets(\n    462     [bbox.intervalx for bbox in bboxes], self.width, self.align)\n    463 height, yoffsets = _get_packed_offsets(\n    464     [bbox.height for bbox in bboxes], self.height, sep, self.mode)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:360, in OffsetBox.get_bbox(self, renderer)\n    358 def get_bbox(self, renderer):\n    359     \"\"\"Return the bbox of the offsetbox, ignoring parent offsets.\"\"\"\n--> 360     bbox, offsets = self._get_bbox_and_child_offsets(renderer)\n    361     return bbox\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:493, in HPacker._get_bbox_and_child_offsets(self, renderer)\n    490 pad = self.pad * dpicor\n    491 sep = self.sep * dpicor\n--> 493 bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]\n    494 if not bboxes:\n    495     return Bbox.from_bounds(0, 0, 0, 0).padded(pad), []\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:493, in <listcomp>(.0)\n    490 pad = self.pad * dpicor\n    491 sep = self.sep * dpicor\n--> 493 bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]\n    494 if not bboxes:\n    495     return Bbox.from_bounds(0, 0, 0, 0).padded(pad), []\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:360, in OffsetBox.get_bbox(self, renderer)\n    358 def get_bbox(self, renderer):\n    359     \"\"\"Return the bbox of the offsetbox, ignoring parent offsets.\"\"\"\n--> 360     bbox, offsets = self._get_bbox_and_child_offsets(renderer)\n    361     return bbox\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:460, in VPacker._get_bbox_and_child_offsets(self, renderer)\n    457         if isinstance(c, PackerBase) and c.mode == \"expand\":\n    458             c.set_width(self.width)\n--> 460 bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]\n    461 (x0, x1), xoffsets = _get_aligned_offsets(\n    462     [bbox.intervalx for bbox in bboxes], self.width, self.align)\n    463 height, yoffsets = _get_packed_offsets(\n    464     [bbox.height for bbox in bboxes], self.height, sep, self.mode)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:460, in <listcomp>(.0)\n    457         if isinstance(c, PackerBase) and c.mode == \"expand\":\n    458             c.set_width(self.width)\n--> 460 bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]\n    461 (x0, x1), xoffsets = _get_aligned_offsets(\n    462     [bbox.intervalx for bbox in bboxes], self.width, self.align)\n    463 height, yoffsets = _get_packed_offsets(\n    464     [bbox.height for bbox in bboxes], self.height, sep, self.mode)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:360, in OffsetBox.get_bbox(self, renderer)\n    358 def get_bbox(self, renderer):\n    359     \"\"\"Return the bbox of the offsetbox, ignoring parent offsets.\"\"\"\n--> 360     bbox, offsets = self._get_bbox_and_child_offsets(renderer)\n    361     return bbox\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:493, in HPacker._get_bbox_and_child_offsets(self, renderer)\n    490 pad = self.pad * dpicor\n    491 sep = self.sep * dpicor\n--> 493 bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]\n    494 if not bboxes:\n    495     return Bbox.from_bounds(0, 0, 0, 0).padded(pad), []\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:493, in <listcomp>(.0)\n    490 pad = self.pad * dpicor\n    491 sep = self.sep * dpicor\n--> 493 bboxes = [c.get_bbox(renderer) for c in self.get_visible_children()]\n    494 if not bboxes:\n    495     return Bbox.from_bounds(0, 0, 0, 0).padded(pad), []\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/offsetbox.py:802, in TextArea.get_bbox(self, renderer)\n    796 def get_bbox(self, renderer):\n    797     _, h_, d_ = mtext._get_text_metrics_with_cache(\n    798         renderer, \"lp\", self._text._fontproperties,\n    799         ismath=\"TeX\" if self._text.get_usetex() else False,\n    800         dpi=self.get_figure(root=True).dpi)\n--> 802     bbox, info, yd = self._text._get_layout(renderer)\n    803     w, h = bbox.size\n    805     self._baseline_transform.clear()\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/text.py:382, in Text._get_layout(self, renderer)\n    380 clean_line, ismath = self._preprocess_math(line)\n    381 if clean_line:\n--> 382     w, h, d = _get_text_metrics_with_cache(\n    383         renderer, clean_line, self._fontproperties,\n    384         ismath=ismath, dpi=self.get_figure(root=True).dpi)\n    385 else:\n    386     w = h = d = 0\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/text.py:69, in _get_text_metrics_with_cache(renderer, text, fontprop, ismath, dpi)\n     66 \"\"\"Call ``renderer.get_text_width_height_descent``, caching the results.\"\"\"\n     67 # Cached based on a copy of fontprop so that later in-place mutations of\n     68 # the passed-in argument do not mess up the cache.\n---> 69 return _get_text_metrics_with_cache_impl(\n     70     weakref.ref(renderer), text, fontprop.copy(), ismath, dpi)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/text.py:77, in _get_text_metrics_with_cache_impl(renderer_ref, text, fontprop, ismath, dpi)\n     73 @functools.lru_cache(4096)\n     74 def _get_text_metrics_with_cache_impl(\n     75         renderer_ref, text, fontprop, ismath, dpi):\n     76     # dpi is unused, but participates in cache invalidation (via the renderer).\n---> 77     return renderer_ref().get_text_width_height_descent(text, fontprop, ismath)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/backends/backend_agg.py:211, in RendererAgg.get_text_width_height_descent(self, s, prop, ismath)\n    209 _api.check_in_list([\"TeX\", True, False], ismath=ismath)\n    210 if ismath == \"TeX\":\n--> 211     return super().get_text_width_height_descent(s, prop, ismath)\n    213 if ismath:\n    214     ox, oy, width, height, descent, font_image = \\\n    215         self.mathtext_parser.parse(s, self.dpi, prop)\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/backend_bases.py:566, in RendererBase.get_text_width_height_descent(self, s, prop, ismath)\n    562 fontsize = prop.get_size_in_points()\n    564 if ismath == 'TeX':\n    565     # todo: handle properties\n--> 566     return self.get_texmanager().get_text_width_height_descent(\n    567         s, fontsize, renderer=self)\n    569 dpi = self.points_to_pixels(72)\n    570 if ismath:\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/texmanager.py:363, in TexManager.get_text_width_height_descent(cls, tex, fontsize, renderer)\n    361 if tex.strip() == '':\n    362     return 0, 0, 0\n--> 363 dvifile = cls.make_dvi(tex, fontsize)\n    364 dpi_fraction = renderer.points_to_pixels(1.) if renderer else 1\n    365 with dviread.Dvi(dvifile, 72 * dpi_fraction) as dvi:\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/texmanager.py:295, in TexManager.make_dvi(cls, tex, fontsize)\n    293     with TemporaryDirectory(dir=cwd) as tmpdir:\n    294         tmppath = Path(tmpdir)\n--> 295         cls._run_checked_subprocess(\n    296             [\"latex\", \"-interaction=nonstopmode\", \"--halt-on-error\",\n    297              f\"--output-directory={tmppath.name}\",\n    298              f\"{texfile.name}\"], tex, cwd=cwd)\n    299         (tmppath / Path(dvifile).name).replace(dvifile)\n    300 return dvifile\n\nFile ~/.env-3.11/lib/python3.11/site-packages/matplotlib/texmanager.py:258, in TexManager._run_checked_subprocess(cls, command, tex, cwd)\n    254     raise RuntimeError(\n    255         f'Failed to process string with tex because {command[0]} '\n    256         'could not be found') from exc\n    257 except subprocess.CalledProcessError as exc:\n--> 258     raise RuntimeError(\n    259         '{prog} was not able to process the following string:\\n'\n    260         '{tex!r}\\n\\n'\n    261         'Here is the full command invocation and its output:\\n\\n'\n    262         '{format_command}\\n\\n'\n    263         '{exc}\\n\\n'.format(\n    264             prog=command[0],\n    265             format_command=cbook._pformat_subprocess(command),\n    266             tex=tex.encode('unicode_escape'),\n    267             exc=exc.output.decode('utf-8', 'backslashreplace'))\n    268         ) from None\n    269 _log.debug(report)\n    270 return report\n\nRuntimeError: latex was not able to process the following string:\nb'Normal(\\\\u03bc=100.9, \\\\u03c3=14.8)'\n\nHere is the full command invocation and its output:\n\nlatex -interaction=nonstopmode --halt-on-error --output-directory=tmp0odtfrz8 52b0b026b5792ceefaeebe3df07045bb334175071e78de6fff5cdf646090dfe2.tex\n\nThis is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded format=latex)\n restricted \\write18 enabled.\nentering extended mode\n(./52b0b026b5792ceefaeebe3df07045bb334175071e78de6fff5cdf646090dfe2.tex\nLaTeX2e <2021-11-15> patch level 1\nL3 programming layer <2022-01-21>\n(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls\nDocument Class: article 2021/10/04 v1.4n Standard LaTeX document class\n(/usr/share/texlive/texmf-dist/tex/latex/base/size10.clo))\n(/usr/share/texlive/texmf-dist/tex/latex/type1cm/type1cm.sty)\n(/usr/share/texmf/tex/latex/cm-super/type1ec.sty\n(/usr/share/texlive/texmf-dist/tex/latex/base/t1cmr.fd))\n(/usr/share/texlive/texmf-dist/tex/latex/base/inputenc.sty)\n(/usr/share/texlive/texmf-dist/tex/latex/geometry/geometry.sty\n(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty)\n(/usr/share/texlive/texmf-dist/tex/generic/iftex/ifvtex.sty\n(/usr/share/texlive/texmf-dist/tex/generic/iftex/iftex.sty)))\n(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty\nFor additional information on amsmath, use the `?' option.\n(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty\n(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty))\n(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty)\n(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty))\n(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amssymb.sty\n(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty))\n(/usr/share/texlive/texmf-dist/tex/latex/underscore/underscore.sty)\n(/usr/share/texlive/texmf-dist/tex/latex/base/textcomp.sty)\n(/usr/share/texlive/texmf-dist/tex/latex/l3backend/l3backend-dvips.def)\nNo file 52b0b026b5792ceefaeebe3df07045bb334175071e78de6fff5cdf646090dfe2.aux.\n*geometry* driver: auto-detecting\n*geometry* detected driver: dvips\n\n! LaTeX Error: Unicode character \u03bc (U+03BC)\n               not set up for use with LaTeX.\n\nSee the LaTeX manual or LaTeX Companion for explanation.\nType  H <return>  for immediate help.\n ...                                              \n                                                  \nl.29 {\\rmfamily Normal(\u03bc\n                         =100.9, \u03c3=14.8)}%\nNo pages of output.\nTranscript written on tmp0odtfrz8/52b0b026b5792ceefaeebe3df07045bb334175071e78d\ne6fff5cdf646090dfe2.log.\n\n\n\n"
    }
  ]
}